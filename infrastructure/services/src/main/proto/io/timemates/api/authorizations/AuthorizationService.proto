syntax = "proto3";

import "io/timemates/api/authorizations/requests/StartAuthorizationRequest.proto";
import "io/timemates/api/authorizations/requests/ConfirmAuthorizationRequest.proto";
import "io/timemates/api/common/types/Status.proto";
import "io/timemates/api/authorizations/requests/GetAuthorizationsRequest.proto";
import "io/timemates/api/authorizations/options/OmitAuthorizationOption.proto";
import "google/protobuf/empty.proto";

option java_package = "io.timemates.api.authorizations";

service AuthorizationService {
  /**
   * Starts authorization by sending corresponding email to email address.
   *
   * Has next restrictions:
   * – 3 requests per email is max.
   */
  rpc startAuthorization(StartAuthorizationRequest) returns (google.protobuf.Empty) {
    option (omit_authorization) = true;
  }

  /**
   * Confirms authorization by sending authorization verification code.
   *
   * Has next restrictions:
   * – 3 attempts per verification code.
   */
  rpc confirmAuthorization(ConfirmAuthorizationRequest) returns (ConfirmAuthorizationRequest.Response);

  /**
   * Gets all active authorizations.
   */
  rpc getAuthorizations(GetAuthorizationsRequest) returns (GetAuthorizationsRequest.Response);

  /**
   * Terminates authorization by given identifier.
   *
   * Returns [Status]
   */
  rpc terminateAuthorization(google.protobuf.Empty) returns (google.protobuf.Empty);
}