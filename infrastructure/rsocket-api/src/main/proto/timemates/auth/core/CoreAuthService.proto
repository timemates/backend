syntax = "proto3";

import "/timemates/auth/core/requests/ObtainAuthRequest.proto";
import "/timemates/auth/core/requests/GetAuthorizationsRequest.proto";
import "/timemates/auth/core/requests/RenewAuthorizationRequest.proto";
import "/timemates/auth/core/requests/LinkAuthMethodRequest.proto";
import "/timemates/auth/core/types/Authorization.proto";
import "google/protobuf/empty.proto";

option java_package = "org.timemates.api.auth.core";

// Core authentication service responsible for managing user authentication and authorizations.
service CoreAuthService {
  // Retrieves the authentication status of the user.
  // This method returns the authentication status of the user.
  rpc ObtainAuth(ObtainAuthRequest) returns (ObtainAuthRequest.Response);

  // Links a new auth method / replaces existing with the given one that was used in the
  // auth session.
  rpc LinkAuthMethod(LinkAuthMethodRequest) returns (LinkAuthMethodRequest.Response);

  // Creates a new authorization from refresh token of old authorization that is expired
  // or is about to be expired.
  rpc RenewAuth(RenewAuthorizationRequest) returns (RenewAuthorizationRequest.Response);

  // Gets all active authorizations.
  // This method retrieves all active authorizations.
  rpc GetAuthList(GetAuthorizationsRequest) returns (GetAuthorizationsRequest.Response);

  // Terminates authorization by given identifier.
  // This method terminates authorization by the given identifier.
  // It returns an empty response upon successful termination.
  rpc TerminateAuth(google.protobuf.Empty) returns (google.protobuf.Empty);
}