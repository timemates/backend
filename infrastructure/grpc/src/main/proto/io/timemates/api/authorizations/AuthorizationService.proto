syntax = "proto3";

import "io/timemates/api/authorizations/requests/StartAuthorizationRequest.proto";
import "io/timemates/api/authorizations/requests/ConfirmAuthorizationRequest.proto";
import "io/timemates/api/common/types/Status.proto";
import "io/timemates/api/authorizations/requests/TerminateAuthorizationRequest.proto";
import "io/timemates/api/authorizations/requests/GetAuthorizationsRequest.proto";

service AuthorizationService {
  /**
   * Starts authorization by sending corresponding email to email address.
   *
   * Has next restrictions:
   * – 3 requests per email is max.
   */
  rpc startAuthorization(StartAuthorizationRequest) returns (StartAuthorizationRequest.Response);

  /**
   * Confirms authorization by sending authorization verification code.
   *
   * Has next restrictions:
   * – 3 attempts per verification code.
   */
  rpc confirmAuthorization(ConfirmAuthorizationRequest) returns (ConfirmAuthorizationRequest.Response);

  /**
   * Gets all active authorizations.
   */
  rpc getAuthorizations(GetAuthorizationsRequest) returns (GetAuthorizationsRequest.Response);

  /**
   * Terminates authorization by given identifier.
   *
   * Returns [Status]
   */
  rpc terminateAuthorization(TerminateAuthorizationRequest) returns (Status);
}